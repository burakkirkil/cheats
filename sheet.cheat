% user, git

; # [ GIT ]

# [display] git diff display line changes and file names
git diff --stat <branch>

# [display] git diff display only file names
git diff --name-only <branch>

# [display] git display the stats of the changes in a commit
git show --stat

# [display] git list ignored files
git status --ignored

# [display] git search the branch if merged
git branch --merged <branch> | grep HP-1234

# [display] git list all the branches
git branch -a

# git auto stage files and commit with message (It won't stage new (untracked) files)
git commit -am "message"

# git --amend
git commit --amend --no-edit

# git --amend with message
git commit --amend -m "new message"

# git amend one liner to the moon baby
git add . && gca! && ggpush --force

; ## Clearing Working Tree

# undo commit (and keep changes in the staging area)
git reset --soft HEAD~1

# undo commit (and keep changes in the staging area)
git reset --soft HEAD^

# Squash the last N commits together
git reset --soft HEAD~<num_commits> && git commit

# [clear] nuke working tree
git reset --hard HEAD && git clean -fd

# [clear] discard unstaged changes
git checkout -- .

# [clear] discard untracked files (remove untracked files and directories)
git clean -fd

# [clear] remove a file from the staging area
git rm --cached <path_to_file>

# [clear] remove all files in a directory from the staging area
git rm --cached -r <directoryname>/

; ## Clearing branches

# [clear branches] Show Locally Stored Remote Branches non-existent on the remote repo
git remote prune origin --dry-run

# [clear branches] Clean-Up Locally Stored Remote Branches non-existent on the remote repo
git remote prune origin

# [clear branches] Clean-Up Local Old Already Merged Branches
git branch --merged <branch> | grep -v "\*" | xargs git branch -d

# [clear branches] Clean-Up Local Old Already Merged Branches
git fetch -p ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d

# [clear branches] Force Delete Clean-Up Local Old Already Merged Branches
git fetch -p ; git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D

# [clear branches] Clean-Up Local Old Already Merged Branches
gfa && gco develop && gl && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}' | egrep -v '\*|master|main|develop|release|demo'); do git branch -d $branch; done

# [clear branches] List unpushed commits https://bit.ly/3Jegpuy
git log --branches --not --remotes

; ## Handling Tags https://stackoverflow.com/a/28280404

# delete the old tag locally
git tag -d <tagname>

# delete the old tag remotely
git push origin :refs/tags/<tagname>

# make a new tag locally
git tag <tagname> <commitId>

# push the new local tag to the remote
git push origin <tagname>

; ## New Methods `switch` and `restore`

# [new] same as 'git checkout develop'
git switch develop

# [new] same as 'git checkout -b new-branch'
git switch -c <new-branch>

# [new] same as 'git checkout -- README.md'
git restore README.md

# [new] same as 'git reset HEAD README.md'
git restore --staged README.md

$ branch: echo 'develop'

; [ NODE ]

# find node process with ps
ps aux | grep node

# find node process with ps
ps -ef | grep node

# find node process (easy way) with port number
lsof -i :8080

# kill a process (node, etc.)
kill -9 18253

; [ MISC ]

# Restart CoreAudio with the terminal command:
sudo launchctl kickstart -kp system/com.apple.audio.coreaudiod

# rsync example
rsync -av --progress ~/projects ~/projects_backup --exclude node_modules

# restart bluetooth
sudo pkill bluetoothd

# bluetooth restart with blueutil
brew install blueutil && blueutil -p 0 && sleep 1 && blueutil -p 1
